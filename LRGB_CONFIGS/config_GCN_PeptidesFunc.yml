# Telegram Bot
# telegram_config_file: # telegram_config.yml


# Dataset and Splits
data_root: DATA
dataset_class: dataset.Peptides
dataset_name:  peptides-func
data_splits_file:  DATA_SPLITS/peptides-func/peptides-func_outer1_inner1.splits


# Hardware
device:  cuda
max_cpus:  64
max_gpus: 4
gpus_per_task:  0.33
# gpus_subset: 0,1,2,3,4,5,6,7,8


# Data Loading
dataset_getter: pydgn.data.provider.DataProvider
data_loader:
  class_name: torch_geometric.loader.DataLoader
  args:
    num_workers : 1
    pin_memory: True


# Reproducibility
seed: 42

# Experiment
result_folder: RESULTS/LRGB_RESULTS
exp_name: gcn
experiment: pydgn.experiment.supervised_task.SupervisedTask
higher_results_are_better: True
evaluate_every: 1
final_training_runs: 4


grid:
  supervised_config:
    model: dgn.DGN_Peptides
    checkpoint: True
    shuffle: True
    batch_size: 200
    epochs: 250

    # Model specific arguments #

    conv_layer: 'GCNConv'

    num_layers:
      - 6

    hidden_dim:
      - 235

    dropout:
      - 0.1

    use_positional_encoding: 'RWSE'

    # ------------------------ #

    # Optimizer (with an example - 3 possible alternatives)
    optimizer:
      - class_name: pydgn.training.callback.optimizer.Optimizer
        args:
          optimizer_class_name: torch.optim.AdamW
          lr:
            - 0.001
          weight_decay: 0.

    # Scheduler (optional)
    scheduler: null

    # Loss metric
    loss: metric.MultiLabelCrossEntropy

    # Score metric
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          main_scorer: metric.OGB_AP

    # Readout (optional)
    readout: null

    # Training engine
    engine: pydgn.training.engine.TrainingEngine

    # Gradient clipper (optional)
    gradient_clipper: null

    # Early stopper (optional, with an example of "patience" early stopping on the validation score)
    early_stopper:
      - class_name:
          - pydgn.training.callback.early_stopping.PatienceEarlyStopper
        args:
          patience:
            - 250
          # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
          monitor: validation_main_score
          mode: max  # is best the `max` or the `min` value we are monitoring?
          checkpoint: True  # store the best checkpoint

    # Plotter of metrics
    plotter: pydgn.training.callback.plotter.Plotter