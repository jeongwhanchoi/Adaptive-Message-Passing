# Telegram Bot
# telegram_config_file: # telegram_config.yml


# Dataset and Splits
data_root: DATA
dataset_class: dataset.Peptides
dataset_name:  peptides-struct
data_splits_file:  DATA_SPLITS/peptides-struct/peptides-struct_outer1_inner1.splits


# Hardware
device:  cuda
max_cpus:  64
max_gpus: 4
gpus_per_task:  1.


# Data Loading
dataset_getter: pydgn.data.provider.DataProvider
data_loader:
  class_name: torch_geometric.loader.DataLoader
  args:
    num_workers : 1
    pin_memory: True


# Reproducibility
seed: 42

# Experiment
result_folder: RESULTS/LRGB_RESULTS
exp_name: udn_gatedgcn
experiment: experiment.UDN_SupervisedExperiment
higher_results_are_better: False
evaluate_every: 1
final_training_runs: 4


grid:
  supervised_config:
    model: model.AMP_LRGB
    checkpoint: True
    shuffle: True
    batch_size: 200
    epochs: 1500

    # Model specific arguments #

    conv_layer: 'ResGatedGraphConv'

    hidden_dim:
      - 100

    dropout:
      - 0.

    use_positional_encoding: 'LapPE'

    # treat the minibatch ELBO as if we had run an entire pass over the dataset
    # essentially it rescales the minibatch gradient of the classification term
    # therefore avoiding that other terms dominate the loss
    n_observations: 15535  # approx training set size

    filter_messages:
      - null
      - 'embedding-no-weight-sharing'
      - 'input_features'

    quantile: 0.99

    layer_generator: layer_generator.LRGBGenerator

    truncated_distribution:
      - class_name: distribution.TruncatedDistribution
        args:
          discretized_distribution:
            - class_name: distribution.DiscretizedDistribution
              args:
                base_distribution:
                  - class_name: distribution.FoldedNormal
                    args:  # initial values for the distribution
                      loc:
#                        - 1.
                        - 5.
                      scale:  # this is not proper scale, it is transformed with a softplus
                        - 1.
      - class_name: distribution.TruncatedDistribution
        args:
          discretized_distribution:
            - class_name: distribution.Poisson
              args:
                rate:
#                  - 2.
                  - 5.
      - class_name: distribution.MixtureTruncated
        args:
          discretized_distribution1:
            - class_name: distribution.DiscretizedDistribution
              args:
                base_distribution:
                  - class_name: distribution.FoldedNormal
                    args:  # initial values for the distribution
                      loc:
                        - 1.
                      scale:
                        - 1.
          discretized_distribution2:
            - class_name: distribution.DiscretizedDistribution
              args:
                base_distribution:
                  - class_name: distribution.FoldedNormal
                    args:  # initial values for the distribution
                      loc:
                        - 5.
                      scale:
                        - 1.

    # scale for p(theta)
    theta_prior_scale:
      - 1.
#      - 10.

    # p(ell)
    layer_prior:
      - null
      - class_name: torch.distributions.Normal
        args:
          loc:
            - 5.
          scale:
            - 10.
      - class_name: torch.distributions.Poisson
        args:
          rate:
           - 5.

    global_aggregation: true

    # ------------------------ #


    # Optimizer (with an example - 3 possible alternatives)
    optimizer:
      - class_name: optimizer.Optimizer
        args:
          optimizer_class_name: torch.optim.AdamW
          lr:
            - 0.001
          weight_decay: 0.

    # Scheduler (optional)
    scheduler: null

    # Loss metric (with an example of Additive Loss)
    loss: metric.UDN_ELBO_RegressionMAE

    # Score metric (with an example of Multi Score)
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          main_scorer: metric.UDN_MAE
          depth: metric.UDN_Depth
          UDN_WeightedLogLikelihood: metric.UDN_WeightedLogLikelihoodRegression
          UDN_theta_hidden: metric.UDN_theta_hidden
          UDN_theta_output: metric.UDN_theta_output
          UDN_entropy: metric.UDN_entropy
          UDN_prior_layer: metric.UDN_prior_layer


    # Readout (optional)
    readout: null

    # Training engine
    engine: pydgn.training.engine.TrainingEngine

    # Gradient clipper (optional)
    gradient_clipper: null

    # Early stopper (optional, with an example of "patience" early stopping on the validation score)
    early_stopper:
      - class_name:
          - pydgn.training.callback.early_stopping.PatienceEarlyStopper
        args:
          patience:
            - 250
          # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
          monitor: validation_main_score
          mode: min  # is best the `max` or the `min` value we are monitoring?
          checkpoint: True  # store the best checkpoint

    # Plotter of metrics
    plotter: plotter.StatsPlotter