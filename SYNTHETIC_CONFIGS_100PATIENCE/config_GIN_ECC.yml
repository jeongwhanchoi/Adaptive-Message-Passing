# Telegram Bot
# telegram_config_file: # telegram_config.yml


# Dataset and Splits
data_root: DATA
dataset_class: dataset.GraphPropertyPrediction
dataset_name:  Eccentricity
data_splits_file:  DATA_SPLITS/Eccentricity/Eccentricity_outer1_inner1.splits


# Hardware
device:  cuda
max_cpus:  64
max_gpus: 4
gpus_per_task:  0.1
# gpus_subset: 0,1,2,3,4,5,6,7,8


# Data Loading
dataset_getter: pydgn.data.provider.DataProvider
data_loader:
  class_name: torch_geometric.loader.DataLoader
  args:
    num_workers : 1
    pin_memory: True


# Reproducibility
seed: 42

# Experiment
result_folder: RESULTS/SYN_RESULTS/
exp_name: gin
experiment: pydgn.experiment.supervised_task.SupervisedTask
higher_results_are_better: False
evaluate_every: 1
final_training_runs: 20


grid:
  supervised_config:
    model: dgn.DGN_GraphProp
    checkpoint: True
    shuffle: True
    batch_size: 512
    epochs: 1500

    # Model specific arguments #

    # BEST CONFIGURATION SHARED BY THE AUTHORS WITH US
    # THIS IS OK FOR HOLD-OUT EVALUATION STRATEGIES, WHERE THERE IS ONLY A BEST CONFIGURATION
    # TO BE EVALUATED. WE CAN SKIP MODEL SELECTION IN THIS CASE
    # ALSO, WE DON'T USE PATIENCE AND AVERAGE TEST RESULTS OVER MANY MORE RUNS

    conv_layer: 'GINConv'

    num_layers:
      - 1
#      - 5
#      - 10
#      - 20

    hidden_dim:
#      - 10
#      - 20
      - 30

    activ_fun:
      - tanh

    bias:
      - true

    gcn_norm:
      - false

    weight_sharing:
      - false

    global_aggregation: false

    # ------------------------ #

    # Optimizer (with an example - 3 possible alternatives)
    optimizer:
      - class_name: pydgn.training.callback.optimizer.Optimizer
        args:
          optimizer_class_name: torch.optim.Adam
          lr:
            - 0.003
          weight_decay: 0.000001

    # Scheduler (optional)
    scheduler: null

    # Loss metric (with an example of Additive Loss)
    loss: metric.GraphWiseMSE

    # Score metric (with an example of Multi Score)
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          main_scorer:
            - class_name: metric.GraphWiseLogMSE  # follow same metric computation of ADGN paper
              args:
                accumulate_over_epoch: False  # follow same metric computation of ADGN paper

          mse: pydgn.training.callback.metric.MeanSquareError # metric.GraphWiseMSE

    # Readout (optional)
    readout: null

    # Training engine
    engine: pydgn.training.engine.TrainingEngine

    # Gradient clipper (optional)
    gradient_clipper: null

    # Early stopper (optional, with an example of "patience" early stopping on the validation score)
    early_stopper:
      - class_name:
          - pydgn.training.callback.early_stopping.PatienceEarlyStopper
        args:
          patience:
            - 100
          # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
          monitor: validation_main_score
          mode: min  # is best the `max` or the `min` value we are monitoring?
          checkpoint: True  # store the best checkpoint

    # Plotter of metrics
    plotter: pydgn.training.callback.plotter.Plotter